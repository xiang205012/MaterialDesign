<?xml version="1.0" encoding="utf-8"?>
<android.support.design.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:orientation="vertical"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <android.support.design.widget.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        app:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar">

        <android.support.design.widget.CollapsingToolbarLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            app:contentScrim="?attr/colorPrimary"
            app:statusBarScrim="@android:color/transparent"
            app:layout_scrollFlags="scroll|exitUntilCollapsed">
            <!-- app:contentScrim="?attr/colorPrimary" 设置上滑到最小高度时，toolbar的颜色-->
            <!--如果你希望拖动过程中状态栏是透明的，可以在CollapsingToolbarLayout中加
               app:statusBarScrim=”@android:color/transparent”，并且在onCreate中调用
               getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)将状态栏设置为透明就好啦-->
            <ImageView
                android:layout_width="match_parent"
                android:layout_height="200dp"
                android:scaleType="centerCrop"
                android:src="@mipmap/appbar_img"
                app:layout_collapseMode="parallax"
                app:layout_collapseParallaxMultiplier="0.7"/>
            <!-- app:layout_collapseParallaxMultiplier 设置视差滚动比例因子 0 ~ 1-->
            <android.support.v7.widget.Toolbar
                android:id="@+id/appbar_toolbar"
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                app:title="TestAppBar"
                app:layout_collapseMode="pin"></android.support.v7.widget.Toolbar>

        </android.support.design.widget.CollapsingToolbarLayout>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="30dp"
            android:background="#ff0000"
            android:text="测试任意view顶部悬停"/>

    </android.support.design.widget.AppBarLayout>


    <!-- 注意： CoordinatorLayout是继承ViewGroup,如果只有两个直接的子view，那么整体是垂直线性布局-->
    <android.support.v4.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        app:layout_behavior="@string/appbar_scrolling_view_behavior">
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="CollapsingToolbarLayout:CollapsingToolbarLayout是用来对Toolbar进行再次包装的ViewGroup，主要是用于实现折叠（其实就是看起来像伸缩~）的App Bar效果。
                        它需要放在AppBarLayout布局里面，并且作为AppBarLayout的直接子View。
                        CollapsingToolbarLayout主要包括几个功能（参照了官方网站上内容，略加自己的理解进行解释）：
                        (1) 折叠Title（Collapsing title）：当布局内容全部显示出来时，title是最大的，
                            但是随着View逐步移出屏幕顶部，title变得越来越小。你可以通过调用setTitle函数来设置title。

                        (2)内容纱布（Content scrim）：根据滚动的位置是否到达一个阀值，来决定是否对View“盖上纱布”。
                           可以通过setContentScrim(Drawable)来设置纱布的图片.

                        (3)状态栏纱布（Status bar scrim)：根据滚动位置是否到达一个阀值决定是否对状态栏“盖上纱布”，
                           你可以通过setStatusBarScrim(Drawable)来设置纱布图片，但是只能在LOLLIPOP设备上面有作用。

                        (4)视差滚动子View(Parallax scrolling children):子View可以选择在当前的布局当时是否以“视差”的方式来跟随滚动。
                          （PS:其实就是让这个View的滚动的速度比其他正常滚动的View速度稍微慢一点）。将布局参数app:layout_collapseMode设为parallax

                        (5)将子View位置固定(Pinned position children)：子View可以选择是否在全局空间上固定位置，
                           这对于Toolbar来说非常有用，因为当布局在移动时，可以将Toolbar固定位置而不受移动的影响。 将app:layout_collapseMode设为pin。
            "/>

    </android.support.v4.widget.NestedScrollView>


</android.support.design.widget.CoordinatorLayout>